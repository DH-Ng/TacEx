from dataclasses import MISSING, dataclass
from typing import TYPE_CHECKING, Any, Dict, Literal, Sequence, Tuple, Union

from isaaclab.sensors import SensorBaseCfg, TiledCameraCfg
from isaaclab.utils import class_to_dict, configclass, to_camel_case

from .gelsight_sensor import GelSightSensor
from .simulation_approaches.gelsight_simulator import GelSightSimulator
from .simulation_approaches.gelsight_simulator_cfg import GelSightSimulatorCfg

"""Configuration for a Gelsight tactile sensor."""
@configclass
class GelSightSensorCfg(SensorBaseCfg):
    class_type: type = GelSightSensor

    @configclass
    class Dimensions:
        """Dimensions here are in mm (we assume that the world units are meters)"""
        width: float = 0.0,
        length: float = 0.0,
        height: float = 0.0
    case_dimensions: Dimensions = Dimensions()
    gelpad_dimensions: Dimensions = Dimensions()

    @configclass
    class SensorCameraCfg:
        """Configs for the Camera of the GelSight sensor."""
        prim_path_appendix: str = "/Camera",
        update_period: float = 0,
        resolution: Tuple[int] = (120, 160),
        data_types: list[str] = ["depth"],
        clipping_range: Tuple[float] = (0,1),
    sensor_camera_cfg: SensorCameraCfg = SensorCameraCfg()

    data_types: list[str] = ["camera_depth", "height_map", "tactile_rgb", "marker_motion"]
    """Output of the GelSight Sensor

    - height_map: Generated by the sensor camera. Shape = the camera resolution specified in the SensorCameraCfg.
    - tactile_rgb: Tactile RGB image. Shape = tactile_img_resolution specified in the OpticalSimulator class.
    - marker_motion: New new positions of the gelpad markers.
        Shape (num_envs, num_markers_row, num_markers_col, 2)
        - each marker is specified by (row_number, col_number) and has a pos (x,y)

    """

    optical_sim_cfg: GelSightSimulatorCfg = None # freely choose what class, but can also be left None
    """Cfg class of the optical simulator you want to use."""

    marker_motion_sim_cfg: GelSightSimulatorCfg = None
    """Cfg class of the marker motion simulator you want to use."""

    compute_indentation_depth_class: Literal["optical_sim", "marker_motion_sim"] = "optical_sim"
    """What class to use for computing the indentation depth.

    Maybe you want to use the method via your optical simulation (e.g. Taxim), or use one from your marker motion simulation (e.g. if its FEM based).
    """

    device: str = "cuda"
