<?xml version='1.0' encoding='UTF-8'?>
<testsuites><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="14" time="248.686" timestamp="2025-08-12T22:33:24.769442+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="39.318"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="11.099"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="34.331"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="28.915"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="7.179"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="5.776"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="12.094"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="10.727"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="14.013"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="10.322"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="22.207"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="10.095"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="9.233"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="8.219"/></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="88.038" timestamp="2025-08-12T22:31:53.044753+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="7.626"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="2.885"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="4.338"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.730"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="5.052"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.425"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.645"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="3.406"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.944"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="4.233"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.400"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="3.639"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="3.136"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.594"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="3.081"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="4.186"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="3.192"/></testsuite><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="16" time="128.026" timestamp="2025-08-12T22:27:53.288779+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-2-cuda]" time="36.025"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="14.245"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-2-cuda]" time="6.918"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="6.490"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-2-cuda]" time="5.647"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="5.680"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-2-cuda]" time="9.117"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="9.369"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-2-cuda]" time="6.791"><failure message="RuntimeError: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 2, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
source/tacex_tasks/test/test_environments.py:129: in _check_random_actions
    obs, _ = env.reset()
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/wrappers/common.py:400: in reset
    return super().reset(seed=seed, options=options)
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/core.py:333: in reset
    return self.env.reset(seed=seed, options=options)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:268: in reset
    self._reset_idx(indices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb_uipc.BallRollingTactileRGBUipcEnv object at 0x7f036b1acdf0&gt;
env_ids = &lt;[RuntimeError('CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some ...pile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n') raised in repr()] Tensor object at 0x7f044bd3a5c0&gt;

    def _reset_idx(self, env_ids: torch.Tensor | None):
        # # log task metrics
        # self.extras["log"] = {
        #     "Metric/ee_obj_error": self.object_ee_distance[env_ids].mean(),
        #     "Metric/ee_goal_error": self.ee_goal_distance[env_ids].mean(),
        #     "Metric/obj_goal_error": self.obj_goal_distance[env_ids].mean(),
        # }

        # don't do full reset for env where time_out, but robot still in contact with ball
        in_contact = self.gsmini.indentation_depth &gt; 0
        partial_reset_env_ids = in_contact &amp; self._time_out

        full_reset_env_ids = (
            (self.reset_buf &amp; torch.logical_not(partial_reset_env_ids)).nonzero(as_tuple=False).squeeze(-1)
        )

        # reset buffers
        super()._reset_idx(env_ids)

        # # spawn obj at initial position
        # obj_pos = self.object.data.default_root_state[full_reset_env_ids]
        # obj_pos[:, :2] += sample_uniform(
        #     -0.00025,
        #     0.00025,
        #     (len(full_reset_env_ids), 2),
        #     self.device
        # )
        # obj_pos[:, :3] += self.scene.env_origins[full_reset_env_ids]
        # self.object.write_root_state_to_sim(obj_pos, env_ids=full_reset_env_ids)

        # reset robot state
        joint_pos = self._robot.data.default_joint_pos[full_reset_env_ids]
        joint_vel = torch.zeros_like(joint_pos)
        self._robot.set_joint_position_target(joint_pos, env_ids=full_reset_env_ids)
        self._robot.write_joint_state_to_sim(joint_pos, joint_vel, env_ids=full_reset_env_ids)

        # set commands: random target position
        # self._goal_pos_b[env_ids, :2] = self.object.data.default_root_state[env_ids, :2] #todo code that properly
        self._goal_pos_b[env_ids, :2] = self.object.data.root_pos_w[env_ids, :2]

        self._goal_pos_b[env_ids, 0] += sample_uniform(
            self.cfg.goal_randomization_range_x[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_x[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )
        self._goal_pos_b[env_ids, 1] += sample_uniform(
            self.cfg.goal_randomization_range_y[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_y[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )

&gt;       self.prev_actions[env_ids] = 0.0
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:816: RuntimeError</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.736"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:485: in __init__
    super().__init__(cfg, render_mode, **kwargs)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:71: in __init__
    self.sim: SimulationContext = SimulationContext(self.cfg.sim)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;isaaclab.sim.simulation_context.SimulationContext object at 0x7f0363164a60&gt;
cfg = SimulationCfg(physics_prim_path='/physicsScene', device='cuda', dt=0.016666666666666666, render_interval=1, gravity=(0..., samples_per_pixel=None, enable_shadows=None, enable_ambient_occlusion=None, carb_settings=None, rendering_mode=None))

    def __init__(self, cfg: SimulationCfg | None = None):
        """Creates a simulation context to control the simulator.

        Args:
            cfg: The configuration of the simulation. Defaults to None,
                in which case the default configuration is used.
        """
        # store input
        if cfg is None:
            cfg = SimulationCfg()
        # check that the config is valid
        cfg.validate()
        self.cfg = cfg
        # check that simulation is running
        if stage_utils.get_current_stage() is None:
            raise RuntimeError("The stage has not been created. Did you run the simulator?")

        # acquire settings interface
        self.carb_settings = carb.settings.get_settings()

        # apply carb physics settings
        self._apply_physics_settings()

        # note: we read this once since it is not expected to change during runtime
        # read flag for whether a local GUI is enabled
        self._local_gui = self.carb_settings.get("/app/window/enabled")
        # read flag for whether livestreaming GUI is enabled
        self._livestream_gui = self.carb_settings.get("/app/livestream/enabled")
        # read flag for whether XR GUI is enabled
        self._xr_gui = self.carb_settings.get("/app/xr/enabled")

        # read flag for whether the Isaac Lab viewport capture pipeline will be used,
        # casting None to False if the flag doesn't exist
        # this flag is set from the AppLauncher class
        self._offscreen_render = bool(self.carb_settings.get("/isaaclab/render/offscreen"))
        # read flag for whether the default viewport should be enabled
        self._render_viewport = bool(self.carb_settings.get("/isaaclab/render/active_viewport"))
        # flag for whether any GUI will be rendered (local, livestreamed or viewport)
        self._has_gui = self._local_gui or self._livestream_gui or self._xr_gui

        # apply render settings from render config
        self._apply_render_settings_from_cfg()

        # store the default render mode
        if not self._has_gui and not self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.NO_GUI_OR_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        elif not self._has_gui and self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.PARTIAL_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        else:
            # note: need to import here in case the UI is not available (ex. headless mode)
            import omni.ui as ui
            from omni.kit.viewport.utility import get_active_viewport

            # set default render mode
            # note: this can be changed by calling the `set_render_mode` function
            self.render_mode = self.RenderMode.FULL_RENDERING
            # acquire viewport context
            self._viewport_context = get_active_viewport()
            self._viewport_context.updates_enabled = True  # pyright: ignore [reportOptionalMemberAccess]
            # acquire viewport window
            # TODO @mayank: Why not just use get_active_viewport_and_window() directly?
            self._viewport_window = ui.Workspace.get_window("Viewport")
            # counter for periodic rendering
            self._render_throttle_counter = 0
            # rendering frequency in terms of number of render calls
            self._render_throttle_period = 5

        # check the case where we don't need to render the viewport
        # since render_viewport can only be False in headless mode, we only need to check for offscreen_render
        if not self._render_viewport and self._offscreen_render:
            # disable the viewport if offscreen_render is enabled
            from omni.kit.viewport.utility import get_active_viewport

            get_active_viewport().updates_enabled = False

        # override enable scene querying if rendering is enabled
        # this is needed for some GUI features
        if self._has_gui:
            self.cfg.enable_scene_query_support = True
        # set up flatcache/fabric interface (default is None)
        # this is needed to flush the flatcache data into Hydra manually when calling `render()`
        # ref: https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_physics.html
        # note: need to do this here because super().__init__ calls render and this variable is needed
        self._fabric_iface = None
        # read isaac sim version (this includes build tag, release tag etc.)
        # note: we do it once here because it reads the VERSION file from disk and is not expected to change.
        self._isaacsim_version = get_version()

        # create a tensor for gravity
        # note: this line is needed to create a "tensor" in the device to avoid issues with torch 2.1 onwards.
        #   the issue is with some heap memory corruption when torch tensor is created inside the asset class.
        #   you can reproduce the issue by commenting out this line and running the test `test_articulation.py`.
&gt;       self._gravity_tensor = torch.tensor(self.cfg.gravity, dtype=torch.float32, device=self.cfg.device)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:212: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered
E           CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E           For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E           Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-2-cuda]" time="0.296"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x7f0375578fd0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 2, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="0.297"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x7f036e598ac0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-2-cuda]" time="0.305"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x7f050b782c50&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 2, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="0.312"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x7f044175f070&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-2-cuda]" time="0.301"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x7f0448947ca0&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 2, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 2, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="0.311"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x7f04495e83d0&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(2, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="84.152" timestamp="2025-08-12T22:26:25.244187+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="8.062"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="3.163"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="3.256"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.723"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="5.291"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="3.435"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.491"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="2.763"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.298"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.690"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.304"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.964"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.576"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.917"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.612"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="3.467"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="3.971"/></testsuite><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="16" time="259.001" timestamp="2025-08-12T22:19:47.222735+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-16-cuda]" time="45.059"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="29.725"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-16-cuda]" time="10.792"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="23.503"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-16-cuda]" time="6.626"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="6.320"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-16-cuda]" time="11.051"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="9.092"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-16-cuda]" time="0.001"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="24.582"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-16-cuda]" time="16.260"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="9.869"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-16-cuda]" time="23.393"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="13.701"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-16-cuda]" time="1.387"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 16, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x78182abd3a90&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 16, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(16, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 16 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 16, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="1.685"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x781829b81e40&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(16, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 16 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="93.504" timestamp="2025-08-12T22:18:10.005846+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="7.950"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="3.799"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="4.218"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="4.289"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="5.510"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.801"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.831"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="3.860"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.810"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="4.602"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="4.396"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="3.936"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.637"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="3.155"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="3.149"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="4.469"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="3.476"/></testsuite><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="16" time="211.350" timestamp="2025-08-12T22:13:44.461390+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="53.444"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="27.556"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="25.940"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="5.447"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="6.437"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="5.586"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="10.955"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="7.684"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="39.184"><failure message="RuntimeError: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
source/tacex_tasks/test/test_environments.py:129: in _check_random_actions
    obs, _ = env.reset()
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/wrappers/common.py:400: in reset
    return super().reset(seed=seed, options=options)
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/core.py:333: in reset
    return self.env.reset(seed=seed, options=options)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:268: in reset
    self._reset_idx(indices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb_uipc.BallRollingTactileRGBUipcEnv object at 0x721cdc19d330&gt;
env_ids = &lt;[RuntimeError('CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some ...pile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n') raised in repr()] Tensor object at 0x721c2bf32520&gt;

    def _reset_idx(self, env_ids: torch.Tensor | None):
        # # log task metrics
        # self.extras["log"] = {
        #     "Metric/ee_obj_error": self.object_ee_distance[env_ids].mean(),
        #     "Metric/ee_goal_error": self.ee_goal_distance[env_ids].mean(),
        #     "Metric/obj_goal_error": self.obj_goal_distance[env_ids].mean(),
        # }

        # don't do full reset for env where time_out, but robot still in contact with ball
        in_contact = self.gsmini.indentation_depth &gt; 0
        partial_reset_env_ids = in_contact &amp; self._time_out

        full_reset_env_ids = (
            (self.reset_buf &amp; torch.logical_not(partial_reset_env_ids)).nonzero(as_tuple=False).squeeze(-1)
        )

        # reset buffers
        super()._reset_idx(env_ids)

        # # spawn obj at initial position
        # obj_pos = self.object.data.default_root_state[full_reset_env_ids]
        # obj_pos[:, :2] += sample_uniform(
        #     -0.00025,
        #     0.00025,
        #     (len(full_reset_env_ids), 2),
        #     self.device
        # )
        # obj_pos[:, :3] += self.scene.env_origins[full_reset_env_ids]
        # self.object.write_root_state_to_sim(obj_pos, env_ids=full_reset_env_ids)

        # reset robot state
        joint_pos = self._robot.data.default_joint_pos[full_reset_env_ids]
        joint_vel = torch.zeros_like(joint_pos)
        self._robot.set_joint_position_target(joint_pos, env_ids=full_reset_env_ids)
        self._robot.write_joint_state_to_sim(joint_pos, joint_vel, env_ids=full_reset_env_ids)

        # set commands: random target position
        # self._goal_pos_b[env_ids, :2] = self.object.data.default_root_state[env_ids, :2] #todo code that properly
        self._goal_pos_b[env_ids, :2] = self.object.data.root_pos_w[env_ids, :2]

        self._goal_pos_b[env_ids, 0] += sample_uniform(
            self.cfg.goal_randomization_range_x[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_x[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )
        self._goal_pos_b[env_ids, 1] += sample_uniform(
            self.cfg.goal_randomization_range_y[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_y[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )

&gt;       self.prev_actions[env_ids] = 0.0
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:816: RuntimeError</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.602"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:485: in __init__
    super().__init__(cfg, render_mode, **kwargs)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:71: in __init__
    self.sim: SimulationContext = SimulationContext(self.cfg.sim)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;isaaclab.sim.simulation_context.SimulationContext object at 0x721b4576e1a0&gt;
cfg = SimulationCfg(physics_prim_path='/physicsScene', device='cuda', dt=0.016666666666666666, render_interval=1, gravity=(0..., samples_per_pixel=None, enable_shadows=None, enable_ambient_occlusion=None, carb_settings=None, rendering_mode=None))

    def __init__(self, cfg: SimulationCfg | None = None):
        """Creates a simulation context to control the simulator.

        Args:
            cfg: The configuration of the simulation. Defaults to None,
                in which case the default configuration is used.
        """
        # store input
        if cfg is None:
            cfg = SimulationCfg()
        # check that the config is valid
        cfg.validate()
        self.cfg = cfg
        # check that simulation is running
        if stage_utils.get_current_stage() is None:
            raise RuntimeError("The stage has not been created. Did you run the simulator?")

        # acquire settings interface
        self.carb_settings = carb.settings.get_settings()

        # apply carb physics settings
        self._apply_physics_settings()

        # note: we read this once since it is not expected to change during runtime
        # read flag for whether a local GUI is enabled
        self._local_gui = self.carb_settings.get("/app/window/enabled")
        # read flag for whether livestreaming GUI is enabled
        self._livestream_gui = self.carb_settings.get("/app/livestream/enabled")
        # read flag for whether XR GUI is enabled
        self._xr_gui = self.carb_settings.get("/app/xr/enabled")

        # read flag for whether the Isaac Lab viewport capture pipeline will be used,
        # casting None to False if the flag doesn't exist
        # this flag is set from the AppLauncher class
        self._offscreen_render = bool(self.carb_settings.get("/isaaclab/render/offscreen"))
        # read flag for whether the default viewport should be enabled
        self._render_viewport = bool(self.carb_settings.get("/isaaclab/render/active_viewport"))
        # flag for whether any GUI will be rendered (local, livestreamed or viewport)
        self._has_gui = self._local_gui or self._livestream_gui or self._xr_gui

        # apply render settings from render config
        self._apply_render_settings_from_cfg()

        # store the default render mode
        if not self._has_gui and not self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.NO_GUI_OR_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        elif not self._has_gui and self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.PARTIAL_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        else:
            # note: need to import here in case the UI is not available (ex. headless mode)
            import omni.ui as ui
            from omni.kit.viewport.utility import get_active_viewport

            # set default render mode
            # note: this can be changed by calling the `set_render_mode` function
            self.render_mode = self.RenderMode.FULL_RENDERING
            # acquire viewport context
            self._viewport_context = get_active_viewport()
            self._viewport_context.updates_enabled = True  # pyright: ignore [reportOptionalMemberAccess]
            # acquire viewport window
            # TODO @mayank: Why not just use get_active_viewport_and_window() directly?
            self._viewport_window = ui.Workspace.get_window("Viewport")
            # counter for periodic rendering
            self._render_throttle_counter = 0
            # rendering frequency in terms of number of render calls
            self._render_throttle_period = 5

        # check the case where we don't need to render the viewport
        # since render_viewport can only be False in headless mode, we only need to check for offscreen_render
        if not self._render_viewport and self._offscreen_render:
            # disable the viewport if offscreen_render is enabled
            from omni.kit.viewport.utility import get_active_viewport

            get_active_viewport().updates_enabled = False

        # override enable scene querying if rendering is enabled
        # this is needed for some GUI features
        if self._has_gui:
            self.cfg.enable_scene_query_support = True
        # set up flatcache/fabric interface (default is None)
        # this is needed to flush the flatcache data into Hydra manually when calling `render()`
        # ref: https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_physics.html
        # note: need to do this here because super().__init__ calls render and this variable is needed
        self._fabric_iface = None
        # read isaac sim version (this includes build tag, release tag etc.)
        # note: we do it once here because it reads the VERSION file from disk and is not expected to change.
        self._isaacsim_version = get_version()

        # create a tensor for gravity
        # note: this line is needed to create a "tensor" in the device to avoid issues with torch 2.1 onwards.
        #   the issue is with some heap memory corruption when torch tensor is created inside the asset class.
        #   you can reproduce the issue by commenting out this line and running the test `test_articulation.py`.
&gt;       self._gravity_tensor = torch.tensor(self.cfg.gravity, dtype=torch.float32, device=self.cfg.device)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:212: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered
E           CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E           For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E           Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="0.212"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x721b4d7ca4d0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="0.225"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x721b4df129b0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="0.228"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x721b5d7f1360&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="0.221"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x721ba6beb490&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="0.230"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x721bec9a6e00&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="0.260"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x721c2b7b3a90&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            # "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="82.912" timestamp="2025-08-12T22:12:18.251376+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="6.072"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="3.078"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="3.492"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="3.129"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="5.156"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.848"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.907"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="3.446"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.474"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="3.166"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.598"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="3.110"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.683"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.720"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.669"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="3.344"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.732"/></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="14" time="234.291" timestamp="2025-08-12T22:06:49.054722+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="46.085"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="16.558"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="29.988"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="5.222"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="6.341"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="5.009"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="10.663"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="8.570"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="14.602"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="8.618"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="30.018"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="10.694"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="10.231"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="7.404"/></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="58.608" timestamp="2025-08-12T22:05:47.884571+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="5.079"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="2.170"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="2.338"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.093"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="3.821"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.116"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.079"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="2.433"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="2.400"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.419"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="2.552"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.414"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.119"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.852"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.091"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="2.505"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.021"/></testsuite><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="16" time="276.522" timestamp="2025-08-12T21:58:35.293126+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="46.378"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="7.757"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="41.190"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="10.630"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="7.846"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="6.252"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="13.192"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="9.671"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="0.001"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="21.169"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="21.122"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="11.422"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="34.556"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="14.408"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="2.138"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    omni.usd.get_context().new_stage()
    # reset the rtx sensors carb setting to False
    carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
    try:
        # parse configuration
        env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

        # skip test if the environment is a multi-agent task
        if hasattr(env_cfg, "possible_agents"):
            print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
            return

        # create environment
        env = gym.make(task_name, cfg=env_cfg)
    except Exception as e:
        if "env" in locals() and hasattr(env, "_is_closed"):
&gt;           env.close()

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x73a899f36a10&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

&gt;   ???

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    omni.usd.get_context().new_stage()
    # reset the rtx sensors carb setting to False
    carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
    try:
        # parse configuration
        env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

        # skip test if the environment is a multi-agent task
        if hasattr(env_cfg, "possible_agents"):
            print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
            return

        # create environment
        env = gym.make(task_name, cfg=env_cfg)
    except Exception as e:
        if "env" in locals() and hasattr(env, "_is_closed"):
            env.close()
        else:
            if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                e.obj.close()
        pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")

    # disable control on stop
&gt;   env.unwrapped.sim._app_control_on_stop_handle = None  # type: ignore
E   Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="2.589"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    omni.usd.get_context().new_stage()
    # reset the rtx sensors carb setting to False
    carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
    try:
        # parse configuration
        env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

        # skip test if the environment is a multi-agent task
        if hasattr(env_cfg, "possible_agents"):
            print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
            return

        # create environment
        env = gym.make(task_name, cfg=env_cfg)
    except Exception as e:
        if "env" in locals() and hasattr(env, "_is_closed"):
&gt;           env.close()

source/tacex_tasks/test/test_environments.py:108:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:267: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x73a88e906860&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

&gt;   ???

source/tacex_tasks/test/test_environments.py:87:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    omni.usd.get_context().new_stage()
    # reset the rtx sensors carb setting to False
    carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
    try:
        # parse configuration
        env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

        # skip test if the environment is a multi-agent task
        if hasattr(env_cfg, "possible_agents"):
            print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
            return

        # create environment
        env = gym.make(task_name, cfg=env_cfg)
    except Exception as e:
        if "env" in locals() and hasattr(env, "_is_closed"):
            env.close()
        else:
            if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                e.obj.close()
        pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")

    # disable control on stop
&gt;   env.unwrapped.sim._app_control_on_stop_handle = None  # type: ignore
E   Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:115: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="89.694" timestamp="2025-08-12T21:57:02.872262+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="9.332"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="3.108"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="3.416"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.845"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="5.988"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="4.277"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="3.999"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="4.425"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.897"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.808"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.370"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.963"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.552"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.465"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.417"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="3.342"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.116"/></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="16" time="272.415" timestamp="2025-08-12T21:48:45.623445+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="48.112"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="30.258"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="38.664"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="6.479"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="7.501"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="6.940"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="13.074"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="9.337"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="0.001"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.000"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="14.715"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="9.495"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="30.875"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="14.493"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="9.113"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="7.881"/></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="82.905" timestamp="2025-08-12T21:47:18.366318+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="7.388"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="2.861"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="3.098"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.863"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="6.028"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.532"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.825"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="3.441"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.008"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.973"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.243"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="3.410"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.662"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="3.120"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.689"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="3.960"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.663"/></testsuite><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="16" time="244.197" timestamp="2025-08-12T21:38:23.404710+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="48.891"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="15.815"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="13.037"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="6.117"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="6.962"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="7.230"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="15.849"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="10.913"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="0.001"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="20.093"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="13.340"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="10.865"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="35.428"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="12.815"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="1.358"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:105:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    ???
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x79fa6e7cfee0&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:84:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:112: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="1.584"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:105:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    ???
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x79fa6e7f9780&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:84:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:112: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="67.451" timestamp="2025-08-12T21:37:13.071670+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="9.470"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="2.128"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="2.318"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.058"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="3.948"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.201"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.241"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="2.880"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.363"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.472"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="2.788"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.366"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.144"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.162"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.116"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="2.560"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.141"/></testsuite><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="16" time="208.057" timestamp="2025-08-12T21:28:15.677647+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="38.121"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="6.191"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="9.787"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="5.060"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="5.656"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="4.551"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="10.021"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="7.105"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="0.001"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="22.873"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="16.114"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="11.130"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="32.701"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="12.059"/><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="2.308"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:105:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x736c993d3760&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:84:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:112: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="2.025"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:105:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:155: in __init__
    self.sim.reset()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:536: in reset
    self.render()
../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:591: in render
    raise exception_to_raise
../isaaclab/source/isaaclab/isaaclab/assets/asset_base.py:291: in _initialize_callback
    self._initialize_impl()
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation.py:1211: in _initialize_impl
    self._data = ArticulationData(self.root_physx_view, self.device)
../isaaclab/source/isaaclab/isaaclab/assets/articulation/articulation_data.py:64: in __init__
    self._previous_joint_vel = self._root_physx_view.get_dof_velocities().clone()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;omni.physics.tensors.impl.api.ArticulationView object at 0x736c99bb4970&gt;

    def get_dof_velocities(self):
        """ Gets the degrees of freedom (DOF) velocities for all articulations in the view.

            .. note::
                * The function raises an exception if the DOF velocities cannot be obtained from the backend.
                * The function returns the positions in radians/second for rotational DOFs. Note that this is different from the USD attributes which are in degrees/second for rotational DOFs.

            Returns:
                Union[np.ndarray, torch.Tensor, wp.array]: An array of DOF velocities with shape (count, max_dofs) where count is the number of articulations in the view and max_dofs is the maximum number of degrees of freedom in all the view's articulations.

            Example:
                .. code-block:: python

                  &gt;&gt;&gt; import omni.physics.tensors as tensors
                  &gt;&gt;&gt; sim_view = tensors.create_simulation_view("warp")
                  &gt;&gt;&gt; articulation_view = sim_view.create_articulation_view("/World/Franka_*") # This assumes that the prims referenced by "/World/Franka_*" were already created in the stage
                  &gt;&gt;&gt; dof_velocities = articulation_view.get_dof_velocities() # Get the DOF velocity for all DOFs and all articulations in the view
                  &gt;&gt;&gt; dof_velocities_np = dof_velocities.numpy().reshape(articulation_view.count, articulation_view.max_dofs) # Reshape the obtained array in a 2D numpy array on the host
        """
        if not hasattr(self, "_dof_velocities"):
            self._dof_velocities, self._dof_velocities_desc = self._frontend.create_tensor(
                (self.count, self.max_dofs), float32
            )

        if not self._backend.get_dof_velocities(self._dof_velocities_desc):
&gt;           raise Exception("Failed to get DOF velocities from backend")
E           Exception: Failed to get DOF velocities from backend

/isaac-sim/extsPhysics/omni.physics.tensors/omni/physics/tensors/impl/api.py:1433: Exception

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
            "TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0",  # skip UIPC, since no multi env yet
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:84:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Failed to get DOF velocities from backend

source/tacex_tasks/test/test_environments.py:112: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="62.476" timestamp="2025-08-12T21:27:10.574001+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="4.254"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="2.931"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="2.757"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="2.756"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="4.770"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.383"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.761"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="3.546"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="3.693"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.357"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="2.681"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.323"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.074"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.144"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.089"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="2.473"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.036"/></testsuite><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="16" time="120.550" timestamp="2025-08-12T20:09:26.497655+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="16.705"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="6.172"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="10.158"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="4.687"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="5.135"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="4.448"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="8.839"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="6.589"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="35.441"><failure message="RuntimeError: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
source/tacex_tasks/test/test_environments.py:125: in _check_random_actions
    obs, _ = env.reset()
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/wrappers/common.py:400: in reset
    return super().reset(seed=seed, options=options)
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/core.py:333: in reset
    return self.env.reset(seed=seed, options=options)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:268: in reset
    self._reset_idx(indices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb_uipc.BallRollingTactileRGBUipcEnv object at 0x776033fcc5e0&gt;
env_ids = &lt;[RuntimeError('CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some ...pile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n') raised in repr()] Tensor object at 0x776117d89c10&gt;

    def _reset_idx(self, env_ids: torch.Tensor | None):
        # # log task metrics
        # self.extras["log"] = {
        #     "Metric/ee_obj_error": self.object_ee_distance[env_ids].mean(),
        #     "Metric/ee_goal_error": self.ee_goal_distance[env_ids].mean(),
        #     "Metric/obj_goal_error": self.obj_goal_distance[env_ids].mean(),
        # }

        # don't do full reset for env where time_out, but robot still in contact with ball
        in_contact = self.gsmini.indentation_depth &gt; 0
        partial_reset_env_ids = in_contact &amp; self._time_out

        full_reset_env_ids = (
            (self.reset_buf &amp; torch.logical_not(partial_reset_env_ids)).nonzero(as_tuple=False).squeeze(-1)
        )

        # reset buffers
        super()._reset_idx(env_ids)

        # # spawn obj at initial position
        # obj_pos = self.object.data.default_root_state[full_reset_env_ids]
        # obj_pos[:, :2] += sample_uniform(
        #     -0.00025,
        #     0.00025,
        #     (len(full_reset_env_ids), 2),
        #     self.device
        # )
        # obj_pos[:, :3] += self.scene.env_origins[full_reset_env_ids]
        # self.object.write_root_state_to_sim(obj_pos, env_ids=full_reset_env_ids)

        # reset robot state
        joint_pos = self._robot.data.default_joint_pos[full_reset_env_ids]
        joint_vel = torch.zeros_like(joint_pos)
        self._robot.set_joint_position_target(joint_pos, env_ids=full_reset_env_ids)
        self._robot.write_joint_state_to_sim(joint_pos, joint_vel, env_ids=full_reset_env_ids)

        # set commands: random target position
        # self._goal_pos_b[env_ids, :2] = self.object.data.default_root_state[env_ids, :2] #todo code that properly
        self._goal_pos_b[env_ids, :2] = self.object.data.root_pos_w[env_ids, :2]

        self._goal_pos_b[env_ids, 0] += sample_uniform(
            self.cfg.goal_randomization_range_x[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_x[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )
        self._goal_pos_b[env_ids, 1] += sample_uniform(
            self.cfg.goal_randomization_range_y[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_y[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )

&gt;       self.prev_actions[env_ids] = 0.0
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:816: RuntimeError</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.551"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:485: in __init__
    super().__init__(cfg, render_mode, **kwargs)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:71: in __init__
    self.sim: SimulationContext = SimulationContext(self.cfg.sim)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;isaaclab.sim.simulation_context.SimulationContext object at 0x775fa5fb0190&gt;
cfg = SimulationCfg(physics_prim_path='/physicsScene', device='cuda', dt=0.016666666666666666, render_interval=1, gravity=(0..., samples_per_pixel=None, enable_shadows=None, enable_ambient_occlusion=None, carb_settings=None, rendering_mode=None))

    def __init__(self, cfg: SimulationCfg | None = None):
        """Creates a simulation context to control the simulator.

        Args:
            cfg: The configuration of the simulation. Defaults to None,
                in which case the default configuration is used.
        """
        # store input
        if cfg is None:
            cfg = SimulationCfg()
        # check that the config is valid
        cfg.validate()
        self.cfg = cfg
        # check that simulation is running
        if stage_utils.get_current_stage() is None:
            raise RuntimeError("The stage has not been created. Did you run the simulator?")

        # acquire settings interface
        self.carb_settings = carb.settings.get_settings()

        # apply carb physics settings
        self._apply_physics_settings()

        # note: we read this once since it is not expected to change during runtime
        # read flag for whether a local GUI is enabled
        self._local_gui = self.carb_settings.get("/app/window/enabled")
        # read flag for whether livestreaming GUI is enabled
        self._livestream_gui = self.carb_settings.get("/app/livestream/enabled")
        # read flag for whether XR GUI is enabled
        self._xr_gui = self.carb_settings.get("/app/xr/enabled")

        # read flag for whether the Isaac Lab viewport capture pipeline will be used,
        # casting None to False if the flag doesn't exist
        # this flag is set from the AppLauncher class
        self._offscreen_render = bool(self.carb_settings.get("/isaaclab/render/offscreen"))
        # read flag for whether the default viewport should be enabled
        self._render_viewport = bool(self.carb_settings.get("/isaaclab/render/active_viewport"))
        # flag for whether any GUI will be rendered (local, livestreamed or viewport)
        self._has_gui = self._local_gui or self._livestream_gui or self._xr_gui

        # apply render settings from render config
        self._apply_render_settings_from_cfg()

        # store the default render mode
        if not self._has_gui and not self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.NO_GUI_OR_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        elif not self._has_gui and self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.PARTIAL_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        else:
            # note: need to import here in case the UI is not available (ex. headless mode)
            import omni.ui as ui
            from omni.kit.viewport.utility import get_active_viewport

            # set default render mode
            # note: this can be changed by calling the `set_render_mode` function
            self.render_mode = self.RenderMode.FULL_RENDERING
            # acquire viewport context
            self._viewport_context = get_active_viewport()
            self._viewport_context.updates_enabled = True  # pyright: ignore [reportOptionalMemberAccess]
            # acquire viewport window
            # TODO @mayank: Why not just use get_active_viewport_and_window() directly?
            self._viewport_window = ui.Workspace.get_window("Viewport")
            # counter for periodic rendering
            self._render_throttle_counter = 0
            # rendering frequency in terms of number of render calls
            self._render_throttle_period = 5

        # check the case where we don't need to render the viewport
        # since render_viewport can only be False in headless mode, we only need to check for offscreen_render
        if not self._render_viewport and self._offscreen_render:
            # disable the viewport if offscreen_render is enabled
            from omni.kit.viewport.utility import get_active_viewport

            get_active_viewport().updates_enabled = False

        # override enable scene querying if rendering is enabled
        # this is needed for some GUI features
        if self._has_gui:
            self.cfg.enable_scene_query_support = True
        # set up flatcache/fabric interface (default is None)
        # this is needed to flush the flatcache data into Hydra manually when calling `render()`
        # ref: https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_physics.html
        # note: need to do this here because super().__init__ calls render and this variable is needed
        self._fabric_iface = None
        # read isaac sim version (this includes build tag, release tag etc.)
        # note: we do it once here because it reads the VERSION file from disk and is not expected to change.
        self._isaacsim_version = get_version()

        # create a tensor for gravity
        # note: this line is needed to create a "tensor" in the device to avoid issues with torch 2.1 onwards.
        #   the issue is with some heap memory corruption when torch tensor is created inside the asset class.
        #   you can reproduce the issue by commenting out this line and running the test `test_articulation.py`.
&gt;       self._gravity_tensor = torch.tensor(self.cfg.gravity, dtype=torch.float32, device=self.cfg.device)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:212: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered
E           CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E           For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E           Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="0.201"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x776111b62d10&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="0.212"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x7760487ea530&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="0.208"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x77603abf3130&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="0.209"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x776110f494e0&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="0.223"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x77610c5ea8f0&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="0.214"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x776119d568f0&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="47.659" timestamp="2025-08-12T20:08:36.437480+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="3.859"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="1.808"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="1.912"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="1.702"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="3.186"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="1.654"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="1.744"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="1.906"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="1.994"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="1.835"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="1.989"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="1.877"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="1.695"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="1.718"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="1.728"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="1.884"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="1.667"/></testsuite><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="16" time="166.841" timestamp="2025-08-12T19:40:06.292870+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="19.927"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="7.038"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="29.529"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="9.763"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="7.011"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="5.318"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="10.953"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="8.426"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="43.095"><failure message="RuntimeError: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
source/tacex_tasks/test/test_environments.py:125: in _check_random_actions
    obs, _ = env.reset()
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/wrappers/common.py:400: in reset
    return super().reset(seed=seed, options=options)
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/core.py:333: in reset
    return self.env.reset(seed=seed, options=options)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:268: in reset
    self._reset_idx(indices)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:808: in _reset_idx
    self.cfg.goal_randomization_range_y[0]
/isaac-sim/exts/omni.isaac.ml_archive/pip_prebundle/torch/_tensor.py:39: in wrapped
    return f(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;[RuntimeError('CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some ...pile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n') raised in repr()] Tensor object at 0x713f49f5a250&gt;, other = 0.0

    @_handle_torch_function_and_wrap_type_error_to_not_implemented
    def __rsub__(self, other):
&gt;       return _C._VariableFunctions.rsub(self, other)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

/isaac-sim/exts/omni.isaac.ml_archive/pip_prebundle/torch/_tensor.py:1028: RuntimeError</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.716"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:485: in __init__
    super().__init__(cfg, render_mode, **kwargs)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:71: in __init__
    self.sim: SimulationContext = SimulationContext(self.cfg.sim)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;isaaclab.sim.simulation_context.SimulationContext object at 0x7142329f65f0&gt;
cfg = SimulationCfg(physics_prim_path='/physicsScene', device='cuda', dt=0.016666666666666666, render_interval=1, gravity=(0..., samples_per_pixel=None, enable_shadows=None, enable_ambient_occlusion=None, carb_settings=None, rendering_mode=None))

    def __init__(self, cfg: SimulationCfg | None = None):
        """Creates a simulation context to control the simulator.

        Args:
            cfg: The configuration of the simulation. Defaults to None,
                in which case the default configuration is used.
        """
        # store input
        if cfg is None:
            cfg = SimulationCfg()
        # check that the config is valid
        cfg.validate()
        self.cfg = cfg
        # check that simulation is running
        if stage_utils.get_current_stage() is None:
            raise RuntimeError("The stage has not been created. Did you run the simulator?")

        # acquire settings interface
        self.carb_settings = carb.settings.get_settings()

        # apply carb physics settings
        self._apply_physics_settings()

        # note: we read this once since it is not expected to change during runtime
        # read flag for whether a local GUI is enabled
        self._local_gui = self.carb_settings.get("/app/window/enabled")
        # read flag for whether livestreaming GUI is enabled
        self._livestream_gui = self.carb_settings.get("/app/livestream/enabled")
        # read flag for whether XR GUI is enabled
        self._xr_gui = self.carb_settings.get("/app/xr/enabled")

        # read flag for whether the Isaac Lab viewport capture pipeline will be used,
        # casting None to False if the flag doesn't exist
        # this flag is set from the AppLauncher class
        self._offscreen_render = bool(self.carb_settings.get("/isaaclab/render/offscreen"))
        # read flag for whether the default viewport should be enabled
        self._render_viewport = bool(self.carb_settings.get("/isaaclab/render/active_viewport"))
        # flag for whether any GUI will be rendered (local, livestreamed or viewport)
        self._has_gui = self._local_gui or self._livestream_gui or self._xr_gui

        # apply render settings from render config
        self._apply_render_settings_from_cfg()

        # store the default render mode
        if not self._has_gui and not self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.NO_GUI_OR_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        elif not self._has_gui and self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.PARTIAL_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        else:
            # note: need to import here in case the UI is not available (ex. headless mode)
            import omni.ui as ui
            from omni.kit.viewport.utility import get_active_viewport

            # set default render mode
            # note: this can be changed by calling the `set_render_mode` function
            self.render_mode = self.RenderMode.FULL_RENDERING
            # acquire viewport context
            self._viewport_context = get_active_viewport()
            self._viewport_context.updates_enabled = True  # pyright: ignore [reportOptionalMemberAccess]
            # acquire viewport window
            # TODO @mayank: Why not just use get_active_viewport_and_window() directly?
            self._viewport_window = ui.Workspace.get_window("Viewport")
            # counter for periodic rendering
            self._render_throttle_counter = 0
            # rendering frequency in terms of number of render calls
            self._render_throttle_period = 5

        # check the case where we don't need to render the viewport
        # since render_viewport can only be False in headless mode, we only need to check for offscreen_render
        if not self._render_viewport and self._offscreen_render:
            # disable the viewport if offscreen_render is enabled
            from omni.kit.viewport.utility import get_active_viewport

            get_active_viewport().updates_enabled = False

        # override enable scene querying if rendering is enabled
        # this is needed for some GUI features
        if self._has_gui:
            self.cfg.enable_scene_query_support = True
        # set up flatcache/fabric interface (default is None)
        # this is needed to flush the flatcache data into Hydra manually when calling `render()`
        # ref: https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_physics.html
        # note: need to do this here because super().__init__ calls render and this variable is needed
        self._fabric_iface = None
        # read isaac sim version (this includes build tag, release tag etc.)
        # note: we do it once here because it reads the VERSION file from disk and is not expected to change.
        self._isaacsim_version = get_version()

        # create a tensor for gravity
        # note: this line is needed to create a "tensor" in the device to avoid issues with torch 2.1 onwards.
        #   the issue is with some heap memory corruption when torch tensor is created inside the asset class.
        #   you can reproduce the issue by commenting out this line and running the test `test_articulation.py`.
&gt;       self._gravity_tensor = torch.tensor(self.cfg.gravity, dtype=torch.float32, device=self.cfg.device)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:212: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered
E           CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E           For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E           Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="0.313"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x71401a121db0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="0.332"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x714016593820&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="0.330"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x713f3c746fb0&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="0.361"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x714013d60100&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="0.281"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x71401493a980&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="0.269"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x714019dbb850&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="77.446" timestamp="2025-08-12T19:38:45.738787+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="6.290"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="3.233"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="3.681"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="3.037"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="4.600"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="2.655"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="2.566"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="2.939"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="2.856"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.715"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="3.046"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.691"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="2.493"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.471"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="2.457"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="2.896"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="2.407"/></testsuite><testsuite name="pytest" errors="0" failures="8" skipped="0" tests="16" time="137.554" timestamp="2025-08-12T18:58:52.699992+00:00" hostname="dh"><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-32-cuda]" time="28.061"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Reset-with-IK-solver_v0-1-cuda]" time="8.503"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-32-cuda]" time="15.061"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-Without-Reaching_v0-1-cuda]" time="4.190"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-32-cuda]" time="5.041"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Privileged-v0-1-cuda]" time="4.196"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-32-cuda]" time="9.174"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-Depth-v1-1-cuda]" time="6.514"/><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-32-cuda]" time="34.237"><failure message="RuntimeError: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
source/tacex_tasks/test/test_environments.py:125: in _check_random_actions
    obs, _ = env.reset()
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/wrappers/common.py:400: in reset
    return super().reset(seed=seed, options=options)
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/core.py:333: in reset
    return self.env.reset(seed=seed, options=options)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:268: in reset
    self._reset_idx(indices)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb_uipc.BallRollingTactileRGBUipcEnv object at 0x7ef852d4c1c0&gt;
env_ids = &lt;[RuntimeError('CUDA error: device-side assert triggered\nCUDA kernel errors might be asynchronously reported at some ...pile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.\n') raised in repr()] Tensor object at 0x7ef843938090&gt;

    def _reset_idx(self, env_ids: torch.Tensor | None):
        # # log task metrics
        # self.extras["log"] = {
        #     "Metric/ee_obj_error": self.object_ee_distance[env_ids].mean(),
        #     "Metric/ee_goal_error": self.ee_goal_distance[env_ids].mean(),
        #     "Metric/obj_goal_error": self.obj_goal_distance[env_ids].mean(),
        # }

        # don't do full reset for env where time_out, but robot still in contact with ball
        in_contact = self.gsmini.indentation_depth &gt; 0
        partial_reset_env_ids = in_contact &amp; self._time_out

        full_reset_env_ids = (
            (self.reset_buf &amp; torch.logical_not(partial_reset_env_ids)).nonzero(as_tuple=False).squeeze(-1)
        )

        # reset buffers
        super()._reset_idx(env_ids)

        # # spawn obj at initial position
        # obj_pos = self.object.data.default_root_state[full_reset_env_ids]
        # obj_pos[:, :2] += sample_uniform(
        #     -0.00025,
        #     0.00025,
        #     (len(full_reset_env_ids), 2),
        #     self.device
        # )
        # obj_pos[:, :3] += self.scene.env_origins[full_reset_env_ids]
        # self.object.write_root_state_to_sim(obj_pos, env_ids=full_reset_env_ids)

        # reset robot state
        joint_pos = self._robot.data.default_joint_pos[full_reset_env_ids]
        joint_vel = torch.zeros_like(joint_pos)
        self._robot.set_joint_position_target(joint_pos, env_ids=full_reset_env_ids)
        self._robot.write_joint_state_to_sim(joint_pos, joint_vel, env_ids=full_reset_env_ids)

        # set commands: random target position
        # self._goal_pos_b[env_ids, :2] = self.object.data.default_root_state[env_ids, :2] #todo code that properly
        self._goal_pos_b[env_ids, :2] = self.object.data.root_pos_w[env_ids, :2]

        self._goal_pos_b[env_ids, 0] += sample_uniform(
            self.cfg.goal_randomization_range_x[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_x[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )
        self._goal_pos_b[env_ids, 1] += sample_uniform(
            self.cfg.goal_randomization_range_y[0]
            - self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            self.cfg.goal_randomization_range_y[1]
            + self._goal_random_curr[self.curriculum_levels["goal_randomization_range"]],
            (len(env_ids)),
            self.device,
        )

&gt;       self.prev_actions[env_ids] = 0.0
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:816: RuntimeError</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0-1-cuda]" time="0.587"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered&#10;CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.&#10;For debugging consider passing CUDA_LAUNCH_BLOCKING=1&#10;Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb_uipc.py:485: in __init__
    super().__init__(cfg, render_mode, **kwargs)
source/tacex_uipc/tacex_uipc/envs/direct_uipc_rl_env.py:71: in __init__
    self.sim: SimulationContext = SimulationContext(self.cfg.sim)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;isaaclab.sim.simulation_context.SimulationContext object at 0x7ef841b115a0&gt;
cfg = SimulationCfg(physics_prim_path='/physicsScene', device='cuda', dt=0.016666666666666666, render_interval=1, gravity=(0..., samples_per_pixel=None, enable_shadows=None, enable_ambient_occlusion=None, carb_settings=None, rendering_mode=None))

    def __init__(self, cfg: SimulationCfg | None = None):
        """Creates a simulation context to control the simulator.

        Args:
            cfg: The configuration of the simulation. Defaults to None,
                in which case the default configuration is used.
        """
        # store input
        if cfg is None:
            cfg = SimulationCfg()
        # check that the config is valid
        cfg.validate()
        self.cfg = cfg
        # check that simulation is running
        if stage_utils.get_current_stage() is None:
            raise RuntimeError("The stage has not been created. Did you run the simulator?")

        # acquire settings interface
        self.carb_settings = carb.settings.get_settings()

        # apply carb physics settings
        self._apply_physics_settings()

        # note: we read this once since it is not expected to change during runtime
        # read flag for whether a local GUI is enabled
        self._local_gui = self.carb_settings.get("/app/window/enabled")
        # read flag for whether livestreaming GUI is enabled
        self._livestream_gui = self.carb_settings.get("/app/livestream/enabled")
        # read flag for whether XR GUI is enabled
        self._xr_gui = self.carb_settings.get("/app/xr/enabled")

        # read flag for whether the Isaac Lab viewport capture pipeline will be used,
        # casting None to False if the flag doesn't exist
        # this flag is set from the AppLauncher class
        self._offscreen_render = bool(self.carb_settings.get("/isaaclab/render/offscreen"))
        # read flag for whether the default viewport should be enabled
        self._render_viewport = bool(self.carb_settings.get("/isaaclab/render/active_viewport"))
        # flag for whether any GUI will be rendered (local, livestreamed or viewport)
        self._has_gui = self._local_gui or self._livestream_gui or self._xr_gui

        # apply render settings from render config
        self._apply_render_settings_from_cfg()

        # store the default render mode
        if not self._has_gui and not self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.NO_GUI_OR_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        elif not self._has_gui and self._offscreen_render:
            # set default render mode
            # note: this is the terminal state: cannot exit from this render mode
            self.render_mode = self.RenderMode.PARTIAL_RENDERING
            # set viewport context to None
            self._viewport_context = None
            self._viewport_window = None
        else:
            # note: need to import here in case the UI is not available (ex. headless mode)
            import omni.ui as ui
            from omni.kit.viewport.utility import get_active_viewport

            # set default render mode
            # note: this can be changed by calling the `set_render_mode` function
            self.render_mode = self.RenderMode.FULL_RENDERING
            # acquire viewport context
            self._viewport_context = get_active_viewport()
            self._viewport_context.updates_enabled = True  # pyright: ignore [reportOptionalMemberAccess]
            # acquire viewport window
            # TODO @mayank: Why not just use get_active_viewport_and_window() directly?
            self._viewport_window = ui.Workspace.get_window("Viewport")
            # counter for periodic rendering
            self._render_throttle_counter = 0
            # rendering frequency in terms of number of render calls
            self._render_throttle_period = 5

        # check the case where we don't need to render the viewport
        # since render_viewport can only be False in headless mode, we only need to check for offscreen_render
        if not self._render_viewport and self._offscreen_render:
            # disable the viewport if offscreen_render is enabled
            from omni.kit.viewport.utility import get_active_viewport

            get_active_viewport().updates_enabled = False

        # override enable scene querying if rendering is enabled
        # this is needed for some GUI features
        if self._has_gui:
            self.cfg.enable_scene_query_support = True
        # set up flatcache/fabric interface (default is None)
        # this is needed to flush the flatcache data into Hydra manually when calling `render()`
        # ref: https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_physics.html
        # note: need to do this here because super().__init__ calls render and this variable is needed
        self._fabric_iface = None
        # read isaac sim version (this includes build tag, release tag etc.)
        # note: we do it once here because it reads the VERSION file from disk and is not expected to change.
        self._isaacsim_version = get_version()

        # create a tensor for gravity
        # note: this line is needed to create a "tensor" in the device to avoid issues with torch 2.1 onwards.
        #   the issue is with some heap memory corruption when torch tensor is created inside the asset class.
        #   you can reproduce the issue by commenting out this line and running the test `test_articulation.py`.
&gt;       self._gravity_tensor = torch.tensor(self.cfg.gravity, dtype=torch.float32, device=self.cfg.device)
E       RuntimeError: CUDA error: device-side assert triggered
E       CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E       For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E       Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

../isaaclab/source/isaaclab/isaaclab/sim/simulation_context.py:212: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-Uipc-v0. Error: CUDA error: device-side assert triggered
E           CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
E           For debugging consider passing CUDA_LAUNCH_BLOCKING=1
E           Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-32-cuda]" time="0.203"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x7ef83af684f0&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Tactile-RGB-v0-1-cuda]" time="0.220"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_tactile_rgb.py:453: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBEnv object at 0x7ef9f6388f40&gt;
cfg = BallRollingTactileRGBCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_tactile_rgb.BallRollingTactileRGBCfg'&gt;, ...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Tactile-RGB-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Tactile-RGB-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-32-cuda]" time="0.221"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x7ef8557728f0&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Ball-Rolling-Taxim-Fots-v0-1-cuda]" time="0.224"><failure message="Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/ball_rolling_tactile/ball_rolling_taxim_fots.py:447: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsEnv object at 0x7ef92df92f80&gt;
cfg = BallRollingTaximFotsCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_...vels': 30, 'threshold': 5500.0}, 'joint_vel_penalty': {'min': 0, 'max': 1e-05, 'num_levels': 30, 'threshold': 5500.0}}), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.ball_rolling_tactile.ball_rolling_taxim_fots.BallRollingTaximFotsCfg'&gt;, 's...krl_ppo_tactile_rgb_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.ball_rolling_tactile.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Ball-Rolling-Taxim-Fots-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Ball-Rolling-Taxim-Fots-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-32-cuda]" time="0.215"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x7ef8e23fb0a0&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 32, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 32, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase><testcase classname="test.test_environments" name="test_environments[TacEx-Pole-Balancing-Base-v0-1-cuda]" time="0.216"><failure message="Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.">task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
&gt;           env = gym.make(task_name, cfg=env_cfg)

source/tacex_tasks/test/test_environments.py:104:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
../isaaclab/_isaac_sim/kit/python/lib/python3.10/site-packages/gymnasium/envs/registration.py:742: in make
    env = env_creator(**env_spec_kwargs)
source/tacex_tasks/tacex_tasks/pole_balancing/base_env.py:271: in __init__
    super().__init__(cfg, render_mode, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tacex_tasks.pole_balancing.base_env.PoleBalancingEnv object at 0x7ef92d78b100&gt;
cfg = PoleBalancingEnvCfg(viewer=ViewerCfg(eye=(1, -0.5, 0.1), lookat=(-19.4, 18.2, -1.1), cam_prim_path='/OmniverseKit_Pers...ction_scale=0.05, x_bounds=(0.15, 0.75), y_bounds=(-0.75, 0.75), too_far_away_threshold=0.05, min_height_threshold=0.3), render_mode = None
kwargs = {'env_cfg_entry_point': &lt;class 'tacex_tasks.pole_balancing.base_env.PoleBalancingEnvCfg'&gt;, 'skrl_cfg_entry_point': 'ta...ng.agents:skrl_ppo_camera_cfg.yaml', 'skrl_sac_cfg_entry_point': 'tacex_tasks.pole_balancing.agents:skrl_sac_cfg.yaml'}

    def __init__(self, cfg: DirectRLEnvCfg, render_mode: str | None = None, **kwargs):
        """Initialize the environment.

        Args:
            cfg: The configuration object for the environment.
            render_mode: The render mode for the environment. Defaults to None, which
                is similar to ``"human"``.

        Raises:
            RuntimeError: If a simulation context already exists. The environment must always create one
                since it configures the simulation context and controls the simulation.
        """
        # check that the config is valid
        cfg.validate()
        # store inputs to class
        self.cfg = cfg
        # store the render mode
        self.render_mode = render_mode
        # initialize internal variables
        self._is_closed = False

        # set the seed for the environment
        if self.cfg.seed is not None:
            self.cfg.seed = self.seed(self.cfg.seed)
        else:
            omni.log.warn("Seed not set for the environment. The environment creation may not be deterministic.")

        # create a simulation context to control the simulator
        if SimulationContext.instance() is None:
            self.sim: SimulationContext = SimulationContext(self.cfg.sim)
        else:
&gt;           raise RuntimeError("Simulation context already exists. Cannot create a new one.")
E           RuntimeError: Simulation context already exists. Cannot create a new one.

../isaaclab/source/isaaclab/isaaclab/envs/direct_rl_env.py:102: RuntimeError

During handling of the above exception, another exception occurred:

task_name = 'TacEx-Pole-Balancing-Base-v0', num_envs = 1, device = 'cuda'

    @pytest.mark.parametrize("num_envs, device", [(32, "cuda"), (1, "cuda")])
    @pytest.mark.parametrize("task_name", setup_environment())
    def test_environments(task_name, num_envs, device):
        """Run all environments and check environments return valid signals."""
        # skip these environments as they cannot be run with 32 environments within reasonable VRAM
        if num_envs == 32 and task_name in [
            "Isaac-Stack-Cube-Franka-IK-Rel-Blueprint-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-IK-Rel-v0",
            "Isaac-Stack-Cube-Instance-Randomize-Franka-v0",
            "Isaac-Stack-Cube-Franka-IK-Rel-Visuomotor-v0",
        ]:
            return
        # skip automate environments as they require cuda installation
        if task_name in ["Isaac-AutoMate-Assembly-Direct-v0", "Isaac-AutoMate-Disassembly-Direct-v0"]:
            return
        # skipping this test for now as it requires torch 2.6 or newer
        if task_name == "Isaac-Cartpole-RGB-TheiaTiny-v0":
            return
        print(f"&gt;&gt;&gt; Running test for environment: {task_name}")
&gt;       _check_random_actions(task_name, device, num_envs, num_steps=100)

source/tacex_tasks/test/test_environments.py:83:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

task_name = 'TacEx-Pole-Balancing-Base-v0', device = 'cuda', num_envs = 1, num_steps = 100

    def _check_random_actions(task_name: str, device: str, num_envs: int, num_steps: int = 1000):
        """Run random actions and check environments returned signals are valid."""
        # create a new stage
        omni.usd.get_context().new_stage()
        # reset the rtx sensors carb setting to False
        carb.settings.get_settings().set_bool("/isaaclab/render/rtx_sensors", False)
        try:
            # parse configuration
            env_cfg: ManagerBasedRLEnvCfg = parse_env_cfg(task_name, device=device, num_envs=num_envs)

            # skip test if the environment is a multi-agent task
            if hasattr(env_cfg, "possible_agents"):
                print(f"[INFO]: Skipping {task_name} as it is a multi-agent task")
                return

            # create environment
            env = gym.make(task_name, cfg=env_cfg)
        except Exception as e:
            if "env" in locals() and hasattr(env, "_is_closed"):
                env.close()
            else:
                if hasattr(e, "obj") and hasattr(e.obj, "_is_closed"):
                    e.obj.close()
&gt;           pytest.fail(f"Failed to set-up the environment for task {task_name}. Error: {e}")
E           Failed: Failed to set-up the environment for task TacEx-Pole-Balancing-Base-v0. Error: Simulation context already exists. Cannot create a new one.

source/tacex_tasks/test/test_environments.py:111: Failed</failure></testcase></testsuite><testsuite name="pytest" errors="0" failures="0" skipped="0" tests="17" time="51.406" timestamp="2025-08-12T18:57:58.751605+00:00" hostname="dh"><testcase classname="test.test_gelsight_sensor" name="test_camera_init" time="3.738"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_offset" time="1.905"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_init" time="1.977"/><testcase classname="test.test_gelsight_sensor" name="test_multi_camera_with_different_resolution" time="1.767"/><testcase classname="test.test_gelsight_sensor" name="test_camera_init_intrinsic_matrix" time="3.247"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses" time="1.723"/><testcase classname="test.test_gelsight_sensor" name="test_camera_set_world_poses_from_view" time="1.760"/><testcase classname="test.test_gelsight_sensor" name="test_intrinsic_matrix" time="1.993"/><testcase classname="test.test_gelsight_sensor" name="test_depth_clipping" time="2.231"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_all_colorize" time="2.446"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_no_colorize" time="2.401"/><testcase classname="test.test_gelsight_sensor" name="test_camera_large_resolution_all_colorize" time="2.176"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgb_only" time="1.979"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_rgba_only" time="2.038"/><testcase classname="test.test_gelsight_sensor" name="test_camera_resolution_depth_only" time="1.983"/><testcase classname="test.test_gelsight_sensor" name="test_throughput" time="2.359"/><testcase classname="test.test_gelsight_sensor" name="test_sensor_print" time="1.928"/></testsuite></testsuites>
